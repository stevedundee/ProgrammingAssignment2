## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setcache(m)
m
}
mat = matrix(1:9,3,3)
View(mat)
cachSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
mat = matrix(1:9,3,3)
cachSolve(mat)
cacheSolve(mat)
trace
cacheSolve(mat)
browser
browser(cacheSolve)
mat <- matrix(1:9,3,3)
cacheSolve(mat)
cacheSolve[mat,]
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[getcache(),]
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[getcache,]
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
cacheSolve(mat)
backtrace
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1:10))
cachemean(makeVector(c(1:5))
)
cachemean(makeVector(c(1:5))
)
cachemean(makeVector(c(1:5)))
v <- c(1:5)
cachemean(makeVector(v))
cachemean(makeVector(v))
debug(cachemean)
cachemean(makeVector(v))
debug(makeVector)
cachemean(makeVector(v))
mv <- makeVector(v)
browser()
exit
stop
stop
mv <- makeVector(v)
c
c
mv <- makeVector(v)
mv <- makeVector(v)
cachemean(mv)
cachemean(mv)
cachemean(mv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeInvertedMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
mm <- makeMatrix(matrix(1:9,3,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setcache <- function(cache) {
m <<-cache
}
getcache <- function() {
m
}
list(set=set, get=get,setcache=setcache,getcache=getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if (!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setcache(m)
m
}
mm <- makeMatrix(matrix(1:9,3,3))
cacheSolve(mm)
solve(matrix(1:9,3,3))
solve(matrix(1:27,3,3))
?solve
